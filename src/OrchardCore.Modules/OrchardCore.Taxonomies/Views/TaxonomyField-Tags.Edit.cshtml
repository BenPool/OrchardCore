@model OrchardCore.Taxonomies.ViewModels.EditTaxonomyFieldViewModel
@using OrchardCore.Taxonomies.Settings;
@using OrchardCore.ContentManagement.Metadata.Models
@using Newtonsoft.Json.Linq;

@{
    var settings = Model.PartFieldDefinition.GetSettings<TaxonomyFieldSettings>();
    // Create a flat object for vue multi select with required properties.
    var allTerms = JArray.FromObject(Model.TermEntries.Select(te => new { contentItemId = te.ContentItemId, selected = te.Selected, displayText = te.Term.DisplayText }));

    var partName = Model.PartFieldDefinition.PartDefinition.Name;
    var fieldName = Model.PartFieldDefinition.Name;
    var tenantPath = Context.Request.PathBase.Value;

    var vueElementId = $"TaxonomyField-Tags_{partName}_{fieldName}_{Guid.NewGuid().ToString("n")}";
}

<script asp-src="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.min.js" debug-src="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js" asp-name="vuejs" at="Foot"></script>
<script asp-src="https://cdn.jsdelivr.net/npm/vue-multiselect@2.1.0/dist/vue-multiselect.min.js" asp-name="vuemultiselect" at="Foot"></script>
<style asp-src="https://cdn.jsdelivr.net/npm/vue-multiselect@2.1.0/dist/vue-multiselect.min.css" asp-name="vuemultiselect"></style>
<script asp-src="~/OrchardCore.Taxonomies/Scripts/tags-editor.min.js" debug-src="~/OrchardCore.Taxonomies/Scripts/tags-editor.js" asp-name="tags-editor" at="Foot" depends-on="vuejs, vuemultiselect"></script>
<style asp-src="~/OrchardCore.Taxonomies/Styles/tags-editor.min.css" debug-src="~/OrchardCore.Taxonomies/Styles/tags-editor.css" depends-on="vuemultiselect"></style>


<label>@Model.PartFieldDefinition.DisplayName()</label>

@if (!String.IsNullOrEmpty(settings.Hint))
{
    <span class="hint">â€” @settings.Hint</span>
}

@if (Model.Taxonomy == null)
{
    <div class="alert alert-danger" role="alert">
        @T["The taxonomy could not be found. Please check the settings for this field."]
    </div>
}

<div class="form-group">
    <div id="@vueElementId" class="tags" data-part-name="@partName" data-field-name="@fieldName" data-editor-type="Tags" data-all-terms="@allTerms" data-tenant-path="@tenantPath" data-term-entries-key="@nameof(EditTaxonomyFieldViewModel.TermEntries)" data-content-item-id-key="@nameof(TermEntry.ContentItemId)" data-selected-key="@nameof(TermEntry.Selected)">

        <div class="form-group">
            <div class="w-xl-50">
                <input v-for="option in options" v-bind:name="termEntriesContentItemName(option)" v-bind:value="option.contentItemId" type="hidden" />
                <input v-for="option in options" v-bind:name="termEntriesSelectedName(option)" v-bind:value="option.selected" type="hidden" />

                @*TODO Settings.Open is unused currently. But swapping it in to taggable, enables or disables adding tags.*@
                <vue-multiselect v-model="arrayOfItems"
                                 placeholder="@T["Type to search"]"
                                 select-label="@T["Select"]"
                                 deselect-label="@T["Remove"]"
                                 :options="options"
                                 :multiple="@((!settings.Unique).ToString().ToLower())"
                                 :show-labels="false"
                                 :close-on-select="@settings.Unique.ToString().ToLower()"
                                 track-by="contentItemId"
                                 label="displayText"
                                 @@select="onSelect"
                                 @@remove="onRemove"
                                 :taggable="true"
                                 tag-position="bottom"
                                 tag-placeholder="@T["Press enter to create a tag"]"
                                 @@tag="addTag">
                    <template slot="noResult">
                        @T["No tags found"]
                    </template>
                    <template slot="noOptions">
                        @T["No tags found"]
                    </template>
                </vue-multiselect>
            </div>
        </div>

    </div>
</div>

<script depends-on="tags-editor" at="Foot">
    initializeTagsEditor(document.querySelector("#@vueElementId"));
</script>
